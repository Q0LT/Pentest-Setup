#!/bin/bash
sudo apt-get -y update
sudo apt-get -y upgrade


sudo apt-get install -y libcurl4-openssl-dev
sudo apt-get install -y libssl-dev
sudo apt-get install -y libldns-dev
sudo apt-get install -y libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev build-essential libgmp-dev zlib1g-dev
sudo apt-get install -y build-essential libssl-dev libffi-dev python-dev
sudo apt-get install -y python-setuptools
sudo apt-get install -y python3-pip
sudo apt-get install -y python-pip
sudo apt-get install -y python-dnspython
sudo apt-get install -y git
sudo apt-get install -y rename
sudo apt-get install -y xargs
sudo apt-get install -y jq

#INSTALL GOOGLE CHROME
wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
sudo apt install ./google-chrome-stable_current_amd64.deb
sudo apt install google-chrome-stable

#DOWNLOAD AND INSTALL GO
GO_LATEST_VERSION=$(curl -s https://golang.org/dl/ | grep -oP 'go[0-9]+\.[0-9]+\.[0-9]+' | head -1)
DOWNLOAD_URL="https://golang.org/dl/${GO_LATEST_VERSION}.linux-amd64.tar.gz"
echo "Downloading $GO_LATEST_VERSION..."
curl -LO "$DOWNLOAD_URL"
#REMOVE PREVIOS INSTALLATIONS
sudo rm -rf /usr/local/go
#EXTRACT DOWNLOAD
sudo tar -C /usr/local -xzf "${GO_LATEST_VERSION}.linux-amd64.tar.gz"

#INSTALL BURPSUITE PRO - REQUIRES LICENSE
#DOWNLOAD BINARY
#chmod +x burpsuite_pro_linux_v2020_2_1.sh
#./burpsuite_pro_linux_v2020_2_1.sh

rm "${GO_LATEST_VERSION}.linux-amd64.tar.gz"
#GO VARIBLES
echo "Configuring Go environment..."
#CHECK IF .bash_profile EXISTS, OTHERWISE USE .profile
if [ -f "$HOME/.bash_profile" ]; then
    PROFILE_FILE="$HOME/.bash_profile"
else
    PROFILE_FILE="$HOME/.profile"
fi
#GO PATH
{
    echo ''
    echo '# Set up Go environment'
    echo 'export PATH=$PATH:/usr/local/go/bin'
    echo 'export GOPATH=$HOME/go'
    echo 'export PATH=$PATH:$GOPATH/bin'
} >> "$PROFILE_FILE"
#APPLY CHANGES
source "$PROFILE_FILE"
echo "Go $GO_LATEST_VERSION installation is complete. Please restart your terminal or run 'source $PROFILE_FILE' to apply the changes."

#TOOLS DIRECTORY
mkdir ~/tools
cd ~/tools

#cHECK FOR COMMON TOOLS
check_and_install() {
    local tool=$1
    local package_name=$2
    
    if command -v $tool &> /dev/null; then
        echo "$tool is already installed."
    else
        echo "$tool is not installed. Installing $tool..."
        sudo apt install -y $package_name
        if [ $? -eq 0 ]; then
            echo "$tool installation successful."
        else
            echo "Failed to install $tool. Please install it manually."
        fi
    fi
}

#TOOLS
check_and_install "wireshark" "wireshark"
check_and_install "tcpdump" "tcpdump"
check_and_install "masscan" "masscan"
check_and_install "nessus" "nessus"
check_and_install "openvas" "gvm"
check_and_install "burpsuite" "burpsuite"
check_and_install "zap" "zaproxy"
check_and_install "john" "john"
check_and_install "hashcat" "hashcat"
check_and_install "msfconsole" "metasploit-framework"
check_and_install "sqlmap" "sqlmap"
check_and_install "aircrack-ng" "aircrack-ng"
check_and_install "kismet" "kismet"

echo "Common tool check and installation process completed." 

#IS PIP INSTALLED?
if command -v pip &> /dev/null; then
    pipFound=true
else
    pipFound=false
    echo "Pip is not installed. Installing pip..."
    sudo apt install -y python3-pip
fi


#INSTALL DIRSEARCH
echo "Installing dirsearch..."
git clone https://github.com/maurosoria/dirsearch.git --depth 1
#Check if the directory was cloned
if [ -d "dirsearch"] && [ "$pipFound" = true ]; then
    echo "Installing Python dependencies for dirsearch..."
    #Head to the dirsearch directory
    cd dirsearch
    pip install -r requirements.txt
    #Go back to original directory
    cd ..
    echo "Dirsearch installed successfully"
else
    echo "Dirsearch installation failed"
fi

#INSTALL KNOCKPY
echo "Installing knockpy..."
git clone https://github.com/guelfoweb/knock.git 
if [ -d "knock"] && [ "$pipFound" = true ]; then
    echo "Installing Python dependencies for knock..."
    cd dirsearch
    pip install -r requirements.txt
    cd ..
    echo "Knock installed successfully"
else
    echo "Knock installation failed"
fi

#INSTALL SUBLIST3R
echo "Installing Sublist3r..."
git clone https://github.com/aboul3la/Sublist3r.git
if [ -d "sublist3r"] && [ "$pipFound" = true ]; then
    echo "Installing Python dependencies for sublist3r..."
    cd 
    pip install -r requirements.txt
    cd ..
    echo "sublist3r installed successfully"
else
    echo "sublist3r installation failed"
fi

#INSTALL SQLMAP
echo "Installing SQLMAP..."
git clone --depth 1 https://github.com/sqlmapproject/sqlmap.git sqlmap-dev

#INSTALL AWS CLI
sudo apt install awscli
if [ $? -eq 0 ]; then
    echo "awscli installed successfully."
else
    echo "Failed to install awscli." >&2
    exit 1
fi
#INSTALL teh_s3_bucketeers
echo "Installing teh_s3_bucketeers..."
git clone https://github.com/tomdev/teh_s3_bucketeers.git

#INSTALL SECLISTS
echo "Installing Sublist3r..."
git clone https://github.com/danielmiessler/SecLists.git


#Check if go was correctly installed
if ! command -v go &> /dev/null; then
    echo "Go is not installed, installing now..."
else
    echo "Go is already installed."
fi

#INSTALL HTTPROBE
echo "Installing httprobe..."
go get -u github.com/tomnomnom/httprobe 
echo "Httprobe installed"

#INSTALL UNFURL
echo "Installing unfurl..."
go get -u github.com/tomnomnom/unfurl 
echo "Unfurl installed"

#INSTALL WAYBACKURLS
echo "Installing waybackurls..."
go get github.com/tomnomnom/waybackurls
echo "Waybackurls installed"

echo "Completed successfully"
