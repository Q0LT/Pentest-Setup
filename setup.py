'''
WORK IN PROGRESS
'''
import subprocess
import os

def run_command(command):
    try:
        subprocess.check_call(command, shell=True)
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {e}")

def download_and_install_go():
    go_version_output = subprocess.check_output("curl -s https://golang.org/dl/ | grep -oP 'go[0-9]+\\.[0-9]+\\.[0-9]+' | head -1", shell=True).decode().strip()
    download_url = f"https://golang.org/dl/{go_version_output}.linux-amd64.tar.gz"
    print(f"Downloading {go_version_output}...")
    run_command(f"curl -LO {download_url}")
    run_command("sudo rm -rf /usr/local/go")
    run_command(f"sudo tar -C /usr/local -xzf {go_version_output}.linux-amd64.tar.gz")
    os.remove(f"{go_version_output}.linux-amd64.tar.gz")
    profile_file = "$HOME/.bash_profile" if os.path.exists("$HOME/.bash_profile") else "$HOME/.profile"
    with open(profile_file, "a") as file:
        file.write("\n# Set up Go environment\n")
        file.write("export PATH=$PATH:/usr/local/go/bin\n")
        file.write("export GOPATH=$HOME/go\n")
        file.write("export PATH=$PATH:$GOPATH/bin\n")
    run_command(f"source {profile_file}")
    print(f"Go {go_version_output} installation is complete. Please restart your terminal or run 'source {profile_file}' to apply the changes.")

def check_and_install(tool, package_name):
    if subprocess.call(f"command -v {tool} &> /dev/null", shell=True) == 0:
        print(f"{tool} is already installed.")
    else:
        print(f"{tool} is not installed. Installing {tool}...")
        if run_command(f"sudo apt install -y {package_name}") == 0:
            print(f"{tool} installation successful.")
        else:
            print(f"Failed to install {tool}. Please install it manually.")

def clone_and_install_git_repo(repo_url, directory_name, python_requirements=False):
    os.system(f"git clone {repo_url} {directory_name} --depth 1")
    if python_requirements:
        os.chdir(directory_name)
        os.system("pip install -r requirements.txt")
        os.chdir("..")

def install_go_tool(tool_url):
    os.system(f"go get -u {tool_url}")

def additional_installs():
    if subprocess.call("command -v pip &> /dev/null", shell=True) != 0:
        run_command("sudo apt install -y python3-pip")
    clone_and_install_git_repo("https://github.com/maurosoria/dirsearch.git", "dirsearch", True)
    clone_and_install_git_repo("https://github.com/guelfoweb/knock.git", "knock", True)
    clone_and_install_git_repo("https://github.com/aboul3la/Sublist3r.git", "Sublist3r", True)
    clone_and_install_git_repo("https://github.com/sqlmapproject/sqlmap.git", "sqlmap-dev", False)
    run_command("sudo apt install -y awscli")
    clone_and_install_git_repo("https://github.com/tomdev/teh_s3_bucketeers.git", "teh_s3_bucketeers", False)
    clone_and_install_git_repo("https://github.com/danielmiessler/SecLists.git", "SecLists", False)
    install_go_tool("github.com/tomnomnom/httprobe")
    install_go_tool("github.com/tomnomnom/unfurl")
    install_go_tool("github.com/tomnomnom/waybackurls")


def main():
    run_command("sudo apt-get -y update")
    run_command("sudo apt-get -y upgrade")
    packages = ["libcurl4-openssl-dev", "libssl-dev", "libldns-dev", "libcurl4-openssl-dev libxml2 libxml2-dev libxslt1-dev ruby-dev build-essential libgmp-dev zlib1g-dev",
                "build-essential libssl-dev libffi-dev python-dev", "python-setuptools", "python3-pip", "python-pip", "python-dnspython", "git", "rename", "xargs", "jq"]
    for package in packages:
        run_command(f"sudo apt-get install -y {package}")
    download_and_install_go()
    os.makedirs(os.path.expanduser("~/tools"), exist_ok=True)
    os.chdir(os.path.expanduser("~/tools"))
    tools = [("wireshark", "wireshark"), ("tcpdump", "tcpdump"), ("masscan", "masscan"), ("nessus", "nessus"),
             ("openvas", "gvm"), ("burpsuite", "burpsuite"), ("zap", "zaproxy"), ("john", "john"),
             ("hashcat", "hashcat"), ("msfconsole", "metasploit-framework"), ("sqlmap", "sqlmap"),
             ("aircrack-ng", "aircrack-ng"), ("kismet", "kismet")]
    for tool, package_name in tools:
        check_and_install(tool, package_name)
    additional_installs()

if __name__ == "__main__":
    main()
